<?php
// $Id$

/**
 * @file
 * Generates the invoice and allows you to display an invoice id in views
 */

// Invoice number generation methods

// One single number, never regenerated
define('CATMAN_INVOICE_METHOD_INFINITE', '[invoice_id]');

// Invoice id is regenerated every year
define('CATMAN_INVOICE_METHOD_YEAR', 'Y-[invoice_id]');

// Invoice id is regenerated every month
define('CATMAN_INVOICE_METHOD_MONTH', 'Y-m-[invoice_id]');

// Invoice number is generated by a callback that is being passed the invoice object
define('CATMAN_INVOICE_METHOD_CALLBACK', 'callback');


/**
 * Implements hook_entity_info().
 */
function catman_invoice_entity_info() {
  $return = array(
    'catman_invoice' => array(
      'label' => t('Catman Invoice'),
      'controller class' => 'CommerceInvoiceEntityController',
      'base table' => 'catman_invoice',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'invoice_id',
        'bundle' => 'type',
        'label' => 'invoice_number', // TODO: Update to use a custom callback.
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(
        'catman_invoice' => array(
          'label' => t('Invoice', array(), array('context' => 'a drupal commerce invoice')),
        ),
      ),
      'load hook' => 'catman_invoice_load',
      'view modes' => array(
        'administrator' => array(
          'label' => t('Administrator'),
          'custom settings' => FALSE,
        ),
        'customer' => array(
          'label' => t('Customer'),
          'custom settings' => FALSE,
        ),
      ),
      'creation callback' => '_catman_invoice_create',
      'save callback' => 'catman_invoice_save',
      'deletion callback' => 'catman_invoice_delete',
      'access callback' => 'commerce_entity_access',
      'access arguments' => array(
        'user key' => 'uid',
        'access tag' => 'catman_invoice_access',
      ),
      'token type' => 'catman-invoice',
      'permission labels' => array(
        'singular' => t('invoice'),
        'plural' => t('invoices'),
      ),
    ),
  );

  return $return;
}

/**
 * Loads an invoice by ID.
 */
function catman_invoice_load($invoice_id) {
  $invoices = catman_invoice_load_multiple(array($invoice_id), array());
  return $invoices ? reset($invoices) : FALSE;
}

/**
 * Loads an invoice by order ID
 */
function catman_invoice_load_by_order_id($order_id) {
  $query = new EntityFieldQuery();
  $return = FALSE;
  $result = $query
    ->entityCondition('entity_type', 'catman_invoice')
    ->propertyCondition('order_id', $order_id)
    ->execute();
  if ($result) {
    $invoice = array_keys($result['catman_invoice']);
    $return = catman_invoice_load(reset($invoice));
  }
  return $return;
}

/**
 * Loads multiple invoices by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $invoice_ids
 *   An array of invoice IDs.
 * @param $conditions
 *   An array of conditions on the {catman_invoice} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal invoice loading cache.
 *
 * @return
 *   An array of invoice objects indexed by invoice_id.
 */
function catman_invoice_load_multiple($invoice_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('catman_invoice', $invoice_ids, $conditions, $reset);
}

/**
 * Returns an initialized invoice object.
 *
 * @param $uid
 *   The uid of the owner of the invoice.
 * @param $order_id
 *   The ID of the order the invoice belongs to (if available).
 * @param $type
 *   The type of the invoice; defaults to the standard 'invoice' type.
 *
 * @return
 *   An invoice object with all default fields initialized.
 */
function catman_invoice_new($uid = 0, $order_id = 0, $type = 'catman_invoice') {
  return entity_get_controller('catman_invoice')->create(array('uid' => $uid, 'order_id' => $order_id, 'type' => $type));
}

/**
 * Creation callback for the Entity module.
 */
function _catman_invoice_create($values = array()) {
  // Create a new invoice
  $invoice = catman_invoice_new();

  $wrapper = entity_metadata_wrapper('catman_invoice', $invoice);

  return $wrapper->value();
}

/**
 * Saves an invoice.
 *
 * @param $invoice
 *   The full invoice object to save.
 *
 * @return
 *   The saved invoice object.
 */
function catman_invoice_save($invoice) {
  return entity_get_controller('catman_invoice')->save($invoice);
}

/**
 * Deletes an invoice by ID.
 *
 * @param $invoice
 *   The ID of the invoice to delete.
 *
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function catman_invoice_delete($invoice_id) {
  return catman_invoice_delete_multiple(array($invoice_id));
}

/**
 * Deletes multiple invoices by ID.
 *
 * @param $invoice_ids
 *   An array of invoice IDs to delete.
 *
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function catman_invoice_delete_multiple($invoice_ids) {
  return entity_get_controller('catman_invoice')->delete($invoice_ids);
}

/**
 * Checks invoice access for various operations.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create' or
 *   'delete'.
 * @param $invoice
 *   Optionally an invoice to check access for.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the current user.
 */
function catman_invoice_access($op, $invoice = NULL, $account = NULL) {
  return commerce_entity_access($op, $invoice, $account, 'catman_invoice');
}

/**
 * Implementation of hook_query_commerce_order_access_alter().
 */
function catman_invoice_query_catman_invoice_access_alter(QueryAlterableInterface $query) {
  commerce_entity_access_query_alter($query, 'catman_invoice');
}

/**
 * Implements hook_permission().
 */
function catman_invoice_permission() {
  return commerce_entity_access_permissions('catman_invoice') + array(
    'configure invoice settings' => array(
      'title' => t('Configure invoice settings'),
      'description' => t('Allows users to configure invoice settings for the store.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Returns the name of the specified invoice type or all names keyed by type if no
 *   type is specified.
 *
 * @param $type
 *   The invoice type whose name should be returned; corresponds to the bundle key
 *     in the invoice entity definition.
 *
 * @return
 *   Either the specified name, defaulting to the type itself if the name is not
 *   found, or an array of all names keyed by type if no type is passed in.
 */
function catman_invoice_type_get_name($type = NULL) {
  $names = array();

  $entity = entity_get_info('catman_invoice');

  foreach ($entity['bundles'] as $key => $value) {
    $names[$key] = $value['label'];
  }

  if (empty($type)) {
    return $names;
  }

  if (empty($names[$type])) {
    return check_plain($type);
  }
  else {
    return $names[$type];
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function catman_invoice_field_extra_fields() {
  $extra = array();

  $extra['catman_invoice']['catman_invoice'] = array(
    'display' => array(
      'invoice_number' => array(
        'label' => t('Invoice number'),
        'description' => t('Display simple invoice number'),
        'weight' => -10,
      ),
      'created' => array(
        'label' => t('Created'),
        'description' => t('Display date of invoice creation'),
        'weight' => -5,
      ),
      'balance_due' => array(
        'label' => t('Catman payment information'),
        'description' => t('Display payment method and balance due'),
        'weight' => 10,
      ),
      'invoice_header' => array(
        'label' => t('Catman invoice header'),
        'description' => t('Display invoice header message'),
        'weight' => -6,
      ),
      // 'invoice_footer' => array(
      //   'label' => t('Invoice footer'),
      //   'description' => t('Display invoice footer message'),
      //   'weight' => 11,
      // ),
    ),
  );

  $order_field_instances = field_info_instances('commerce_order', 'commerce_order');

  if (!empty($order_field_instances)) {
    foreach($order_field_instances as $field => $properties){
      $extra['catman_invoice']['catman_invoice']['display'][$field] = array(
        'label' => t('Order: @label', array('@label' => $properties['label'])),
        'description' => $properties['description'],
        'entity' => 'commerce_order',
        'weight' => 0
      );
    }
  }

  return $extra;
}

/**
 * Implements hook_theme().
 */
function catman_invoice_theme() {
  return array(
    'catman_invoice_number' => array(
      'variables' => array('invoice_number' => NULL, 'label' => NULL, 'invoice' => NULL),
      'path' => drupal_get_path('module', 'catman_invoice') . '/theme',
      'template' => 'catman-invoice-number',
    ),
    'catman_invoice_created' => array(
      'variables' => array('created' => NULL, 'label' => NULL, 'invoice' => NULL),
      'path' => drupal_get_path('module', 'catman_invoice') . '/theme',
      'template' => 'catman-invoice-created',
    ),
    'catman_invoice_balance_due' => array(
      'variables' => array('balance_due' => NULL, 'label' => NULL, 'invoice' => NULL),
      'path' => drupal_get_path('module', 'catman_invoice') . '/theme',
      'template' => 'catman-invoice-balance-due',
    ),
    'catman_invoice_invoice_header' => array(
      'variables' => array('invoice_header' => NULL, 'label' => NULL, 'invoice' => NULL),
      'path' => drupal_get_path('module', 'catman_invoice') . '/theme',
      'template' => 'catman-invoice-invoice-header',
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function catman_invoice_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'catman_invoice') . '/includes/views',
  );
}
